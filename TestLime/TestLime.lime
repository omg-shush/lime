//////////////////////////////////////////////////////////////////////////////////////////

/* Accepts and processes commands from the command line
 * until the "quit" command is entered.
 * 
 * hello    Makes the computer say hi to you
 */

/*prompt = [ string ] "$> "

Echo = [ subroutine ]
    prompt -> dotnet.Write
    msg = [ string ] dotnet.ReadLine!
    if msg == "quit" then
        "toodles" -> dotnet.WriteLine
    else if msg == "hello" then
        "Hi! I'm a computer!" -> dotnet.WriteLine
        Echo!
    else if msg == "goodbye" then
        "No don't leave!! ;(" -> dotnet.WriteLine
        Echo!
    else
        "unrecognized command" -> dotnet.WriteLine
        Echo!
        
//Echo!

WriteLine2019 = [ subroutine ]
    "Programmer:" -> dotnet.WriteLine
    "Computer: " -> dotnet.Write
    in -> dotnet.WriteLine*/
    
//"noot noot" -> WriteLine2019

WriteAllLines = [ subroutine ]
    if in == unit then
        unit
    else
        //head = (1, in) -> nth
        //tail = (2, in) -> nth
        head, tail = in
        head -> dotnet.WriteLine
        tail -> WriteAllLines

//("sup dawg"; "line 2: electric boogaloo"; "line 3: w h a t") -> WriteAllLines

List = [ module ]
    Filter = [ subroutine ]
        (predicate, list) = in
        if list == unit then
            unit
        else
            head, tail = list
            if head -> predicate then
                head, ((predicate, tail) -> Filter)
            else
                (predicate, tail) -> Filter

    Map = [ subroutine ]
        mapper, list = in
        if list == unit then
            unit
        else
            head, tail = list
            (head -> mapper), (mapper, tail) -> Map
        
IsntHello = [ subroutine ]
    true, false = (unit == unit), (unit == "false")
    if in == "hello" then
        false
    else
        true

QuoteString = [ subroutine ] "`" + in + "'"
    
filtered = (IsntHello, ("hello"; "goodbye"; "hello"; "sup"; "hello")) -> List.Filter
mapped = (QuoteString, filtered) -> List.Map
mapped -> WriteAllLines

/*
Bool = [ module ]
    true, false = (unit == unit), (unit == "false")
    
    Not = [ subroutine ] if in then false else true
    
Integer = [ module ]
    ToString = [ subroutine ]
        digitToString = [ subroutine ]
            if in == 0 then "0" else if in == 1 then "1" else if in == 2 then "2" else if in == 3 then "3"
            else if in == 4 then "4" else if in == 5 then "5" else if in == 6 then "6" else if in == 7 then "7"
            else if in == 8 then "8" else if in == 9 then "9" else "ERROR: digitToString given a non-digit" -> dotnet.WriteLine
        if in < 0 then
            "-" + ((-in) -> ToString)
        else if in > 9 then
            onesDigit = in % 10
            restDigits = in / 10
            (restDigits -> ToString) + (onesDigit -> digitToString)
        else
            in -> digitToString

List = [ module ]
    Filter = [ subroutine ]
        (predicate, list) = in
        if list == unit then
            unit
        else
            head, tail = list
            if head -> predicate then
                head, ((predicate, tail) -> Filter)
            else
                (predicate, tail) -> Filter

    Map = [ subroutine ]
        mapper, list = in
        if list == unit then
            unit
        else
            head, tail = list
            (head -> mapper), (mapper, tail) -> Map
            
    Iter = [ subroutine ]
        in -> Map
        unit
        
    Rev = [ subroutine ]
        rev = [ subroutine ]
            input, acc = in
            if input == unit then
                acc
            else
                inHead, inTail = input
                (inTail, (inHead, acc)) -> rev
        (in, unit) -> rev
        
    Naturals = [ subroutine ]
        natsDescending = [ subroutine ]
            if in == 0 then
                unit
            else
                in, (in + -1) -> natsDescending
        if in < 0 then
            "ERROR: Naturals given negative count!" -> dotnet.WriteLine
        else
            in -> natsDescending -> Rev
        
IsntHello = [ subroutine ] (in == "hello") -> Bool.Not

QuoteString = [ subroutine ] "`" + in + "'"

WriteAllLines = [ subroutine ]
    if in == unit then
        unit
    else
        //head = (1, in) -> nth
        //tail = (2, in) -> nth
        head, tail = in
        head -> dotnet.WriteLine
        tail -> WriteAllLines
    
filtered = (IsntHello, ("hello"; "goodbye"; "hello"; "sup"; "hello")) -> List.Filter
mapped = (QuoteString, filtered) -> List.Map
mapped -> WriteAllLines

(Integer.ToString, 10 -> List.Naturals) -> List.Map -> WriteAllLines

*/
