//////////////////////////////////////////////////////////////////////////////////////////

/* Accepts and processes commands from the command line
 * until the "quit" command is entered.
 * 
 * hello    Makes the computer say hi to you
 */

/*prompt = [ string ] "$> "

Echo = [ subroutine ]
    prompt -> dotnet.Write
    msg = [ string ] dotnet.ReadLine!
    if msg == "quit" then
        "toodles" -> dotnet.WriteLine
    else if msg == "hello" then
        "Hi! I'm a computer!" -> dotnet.WriteLine
        Echo!
    else if msg == "goodbye" then
        "No don't leave!! ;(" -> dotnet.WriteLine
        Echo!
    else
        msg -> dotnet.WriteLine
        Echo!
        
Echo!*/

/*WriteLine2019 = [ subroutine ]
    "Programmer:" -> dotnet.WriteLine
    "Computer: " -> dotnet.Write
    in -> dotnet.WriteLine
    
//"noot noot" -> WriteLine2019
*/
WriteAllLines = [ subroutine ]
    if in == unit then
        unit
    else
        //head = (1, in) -> nth
        //tail = (2, in) -> nth
        head, tail = in
        head -> dotnet.WriteLine
        tail -> WriteAllLines

//("sup dawg"; "line 2: electric boogaloo"; "line 3: w h a t") -> WriteAllLines

List = [ module ]
    Filter = [ subroutine ]
        (predicate, list) = in
        if list == unit then
            unit
        else
            head, tail = list
            if head -> predicate then
                head, ((predicate, tail) -> Filter)
            else
                (predicate, tail) -> Filter

    Map = [ subroutine ]
        mapper, list = in
        if list == unit then
            unit
        else
            head, tail = list
            (head -> mapper), (mapper, tail) -> Map
        
/*IsntHello = [ subroutine ]
    true, false = (unit == unit), (unit == "false")
    if in == "hello" then
        false
    else
        true

QuoteString = [ subroutine ] "`" + in + "'"*/
    
//filtered = (IsntHello, ("hello"; "goodbye"; "hello"; "sup"; "hello")) -> List.Filter
//mapped = (QuoteString, filtered) -> List.Map
//mapped -> WriteAllLines

ChellSays = [ subroutine ]
    "Chell says: " + in

//"hello" -> ChellSays -> dotnet.WriteLine

(ChellSays, ("hello"; "goodbye"; "cookies"; "oreos"; "i want food")) -> List.Map -> WriteAllLines

/*
        
IsntHello = [ subroutine ] (in == "hello") -> Bool.Not

QuoteString = [ subroutine ] "`" + in + "'"

WriteAllLines = [ subroutine ]
    if in == unit then
        unit
    else
        //head = (1, in) -> nth
        //tail = (2, in) -> nth
        head, tail = in
        head -> dotnet.WriteLine
        tail -> WriteAllLines
    
filtered = (IsntHello, ("hello"; "goodbye"; "hello"; "sup"; "hello")) -> List.Filter
mapped = (QuoteString, filtered) -> List.Map
mapped -> WriteAllLines

(Integer.ToString, 10 -> List.Naturals) -> List.Map -> WriteAllLines

*/

Variable = [ subroutine ]
    42